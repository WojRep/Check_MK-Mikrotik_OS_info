#!/usr/bin/env python3

def inventory_mikrotik_os_info(info):
    return [('', None)]


def check_mikrotik_os_info(item, _no_params, info):
    for routeros, routerosfw, roslevel, softid, serial, mac in info:

        macs = ""
        for mac1 in mac:
            mac2 = hex(mac1).split('x')[-1]
            mac3 = str(mac2)
            if (len(mac3) % 2):
                mac3 = '0' + mac3
            if (len(macs) < 2):
                macs += mac3
            else:
                macs += ':'
                macs += mac3

        summary = \
            'RouterOS version: %s, Firmware version: %s, RouterOS level: %s, SoftID: %s, SN: %s, MAC: %s' \
            % (routeros, routerosfw, roslevel, softid, serial, macs)
        return (0, summary)
    return (3, 'Invalid data')


check_info['mikrotik_os_info'] = {
    'check_function':           check_mikrotik_os_info,
    'inventory_function':       inventory_mikrotik_os_info,
    'service_description':      'RouterOS Info',
    'group':                    'mikrotik_os_info',
    'has_perfdata':             False,
    'snmp_info': (
        '.1.3.6.1',
        [
            "4.1.14988.1.1.4.4.0",  # RouterOS version
            "4.1.14988.1.1.7.4.0",  # RouterOS firmware
            "4.1.14988.1.1.4.3.0",  # RouterOS level
            "4.1.14988.1.1.4.1.0",  # RouterOS Software ID
            "4.1.14988.1.1.7.3.0",  # Serial
            BINARY("2.1.2.2.1.6.1"),        # MAC first interface
        ]
    ),
    'snmp_scan_function': \
    lambda oid: oid('.1.3.6.1.4.1.14988.1.1.4.*') is not None,
}